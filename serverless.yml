service: "aws-lambda-go" # <name> of the service
provider:
  name: aws
  profile: opszero
  runtime: go1.x
  stage: prod
  region: us-west-2
  memorySize: 128
  deploymentBucket:
    name: infra.opszero.com
  environment:
    DYNAMODB_TABLE_NAME: ${self:service}-${sls:stage}
  httpApi:
    cors: true
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #     - dynamodb:*
  #     Resource:
  #       Fn::GetAtt:
  #         - oneTable
  #         - Arn
  #   - Effect: "Allow"
  #     Action:
  #     - s3:*
  #     Resource:
  #       Fn::Join:
  #         - ""
  #         - - "arn:aws:s3:::"
  #           - "Ref" : "setupname"
  #           - '/*'
plugins:
  - serverless-dynamodb-local

functions:
  flywheel:
    handler: ./bootstrap
    timeout: 29
    memorySize: 128
    url:
      cors: true
  # handler:
  #   timeout: 300
  #   memorySize: 512
  #   events:
  #   - schedule: cron(0/15 18-21 ? * * *)

package:
  patterns:
    - '!node_modules/**'

# resources:
#   Resources:
#     oneTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${self:service}-${sls:stage}
#         AttributeDefinitions:
#           - AttributeName: pk
#             AttributeType: S
#           - AttributeName: sk
#             AttributeType: S
#         KeySchema:
#           - AttributeName: pk
#             KeyType: HASH
#           - AttributeName: sk
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#     s3bucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: setupname
#         AccessControl: PublicRead
#         WebsiteConfiguration:
#           IndexDocument: index.html
